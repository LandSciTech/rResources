[{"path":"https://landscitech.github.io/rResources/articles/functions.html","id":"disclaimer","dir":"Articles","previous_headings":"","what":"Disclaimer","title":"Why use functions","text":"Much examples code comes Hadley Wickham et al’s books R data science R packages. , ’ll need use “tidyverse” metapackage follow along today’s code. Use install.packages(\"tidyverse\") install complete set packages. might also want “testthat” package, though isn’t necessary ’ll show today.","code":"library(tidyverse)"},{"path":"https://landscitech.github.io/rResources/articles/functions.html","id":"why-use-functions","dir":"Articles","previous_headings":"","what":"Why use functions","title":"Why use functions","text":"Avoid copy paste errors update code one place Reuse code across different projects Simplify code repetition hidden differences clear can give function evocative name makes code easier understand.","code":""},{"path":"https://landscitech.github.io/rResources/articles/functions.html","id":"when-to-write-a-function","dir":"Articles","previous_headings":"","what":"When to write a function","title":"Why use functions","text":"advice Hadley Wickham: good rule thumb consider writing function whenever ’ve copied pasted block code twice (.e. now three copies code). often means re-writing first two spots used code worth .","code":""},{"path":"https://landscitech.github.io/rResources/articles/functions.html","id":"example-one","dir":"Articles","previous_headings":"When to write a function","what":"Example 1","title":"Why use functions","text":"example repetition can avoid using function. Can spot copy-paste error ? discover error resulting output? Now fixed , can turn function? Identify parts across repetitions “factor ” parts different. function body example, replace letters x rest . Choose clear name tells us function . Ideally verb. Lets use rescale01 since code rescales vector 0-1. Name parts change uses, arguments. x conventional name numeric vector. Function template: Filling template get: use function code can clearly see applying rescaling across column. Note: can decrease repetition even using iteration eg df |> mutate(across(:d, rescale01)). See R Data Science Chapter 26 . try function data containing NA? need change definition function one place can handle NAs appropriately: Now new function allow collaborator include missing data ruin analysis. talk anticipating types failures happen using testing ensure functions robust.","code":"df <- tibble(a = rnorm(5), b = rnorm(5), c = rnorm(5), d = rnorm(5))  df |> mutate(     a = (a - min(a)) / (max(a) - min(a)),   b = (b - min(a)) / (max(b) - min(b)),   c = (c - min(c)) / (max(c) - min(c)),   d = (d - min(d)) / (max(d) - min(d)) ) #> # A tibble: 5 × 4 #>       a       b     c     d #>   <dbl>   <dbl> <dbl> <dbl> #> 1 0.339  0.387  0.291 0     #> 2 0.880 -0.613  0.611 0.557 #> 3 0     -0.0833 1     0.752 #> 4 0.795 -0.0822 0     1     #> 5 1     -0.0952 0.580 0.394 df |> mutate(     a = (a - min(a)) / (max(a) - min(a)),   b = (b - min(b)) / (max(b) - min(b)),   c = (c - min(c)) / (max(c) - min(c)),   d = (d - min(d)) / (max(d) - min(d)) ) #> # A tibble: 5 × 4 #>       a     b     c     d #>   <dbl> <dbl> <dbl> <dbl> #> 1 0.339 1     0.291 0     #> 2 0.880 0     0.611 0.557 #> 3 0     0.530 1     0.752 #> 4 0.795 0.531 0     1     #> 5 1     0.518 0.580 0.394 (x - min(x)) / (max(x) - min(x)) name <- function(arguments) {   body } rescale01 <- function(x) {   (x - min(x)) / (max(x) - min(x)) } df |> mutate(     a = rescale01(a),   b = rescale01(b),   c = rescale01(c),   d = rescale01(d) ) #> # A tibble: 5 × 4 #>       a     b     c     d #>   <dbl> <dbl> <dbl> <dbl> #> 1 0.339 1     0.291 0     #> 2 0.880 0     0.611 0.557 #> 3 0     0.530 1     0.752 #> 4 0.795 0.531 0     1     #> 5 1     0.518 0.580 0.394 rescale01(c(runif(10, 1, 10), NA)) #>  [1] NA NA NA NA NA NA NA NA NA NA NA rescale01 <- function(x, na.rm=TRUE) {   (x - min(x, na.rm = na.rm)) / (max(x, na.rm = na.rm) - min(x, na.rm = na.rm)) } df |>    # This line adds a row with just the column d included   bind_rows(tibble(d = 1)) |>     mutate(     a = rescale01(a),   b = rescale01(b),   c = rescale01(c),   d = rescale01(d) ) #> # A tibble: 6 × 4 #>        a      b      c     d #>    <dbl>  <dbl>  <dbl> <dbl> #> 1  0.339  1      0.291 0     #> 2  0.880  0      0.611 0.468 #> 3  0      0.530  1     0.632 #> 4  0.795  0.531  0     0.840 #> 5  1      0.518  0.580 0.331 #> 6 NA     NA     NA     1"},{"path":"https://landscitech.github.io/rResources/articles/functions.html","id":"what-is-a-function","dir":"Articles","previous_headings":"","what":"What is a function?","title":"Why use functions","text":"function object R just like vector data frame. function can defined package (eg: dplyr::mutate) created R session. mentioned function three parts need defined, name, arguments body. name use call function (rescale01), arguments provide function (x rescale01) body function work.","code":"name <- function(arguments) {   body }"},{"path":"https://landscitech.github.io/rResources/articles/functions.html","id":"environments","dir":"Articles","previous_headings":"What is a function?","what":"Environments","title":"Why use functions","text":"one additional part function implicitly created function created environment. environment place code looks objects called. associated body function. example, defined two objects df rescale01 stored “Global environment” listed Environment pane RStudio. Global environment first place code run Console look object. inside body function rescale01 also defined object x. x exist? ! doesn’t exist Global environment, exists inside function’s environment. Objects created inside function available Global environment. result last expression evaluated function returned. example: returned NULL since value returned message(). return rescaled data assign object evaluate object last.","code":"x #> Error: object 'x' not found rescale01 <- function(x) {   (x - min(x)) / (max(x) - min(x))  message(\"data rescaled\") }  output <- rescale01(df) #> data rescaled  print(output) #> NULL rescale01 <- function(x) {   x <- (x - min(x)) / (max(x) - min(x))  message(\"data rescaled\")  x }  rescale01(df) #> data rescaled #>           a         b         c         d #> 1 0.2303762 0.7964117 0.4183571 0.1275467 #> 2 0.5980471 0.1366962 0.6810416 0.4253950 #> 3 0.0000000 0.4864056 1.0000000 0.5296555 #> 4 0.5401014 0.4870998 0.1790810 0.6619434 #> 5 0.6793915 0.4785473 0.6551536 0.3383143"},{"path":[]},{"path":"https://landscitech.github.io/rResources/articles/functions.html","id":"example-2","dir":"Articles","previous_headings":"Converting existing scripts to use functions","what":"Example 2","title":"Why use functions","text":"Imagine script process csv files containing observations temperature location swimmers. R script: example functions can help simplify code even isn’t lot repetition. First make function assign country based name used swimming location. uses look table rather assigning directly reduce repeated swims$english[swims$== calls. write two functions, one convert F C another applies f_to_c() US temperatures data frame. Finally, one function create output file name keep script tidy can move functions defined separate script. Eg cleaning-funs.R Putting together get simpler script function names tell us code . tricky question much simplification useful? script simpler makes pretty clear steps cleaning process hides assumption can classify country based beach name temperature units based country. Whether desirable depends use case code. One useful tool navigating code containing functions RStudio F2. place cursor inside function name press F2 jump definition function. allows readers care details easily navigate .","code":"infile <- \"swim.csv\" swims_in <- read.csv(infile) swims <- swims_in swims #>   name    where temp #> 1 Adam    beach   95 #> 2 Bess    coast   91 #> 3 Cora seashore   28 #> 4 Dale    beach   85 #> 5 Evan  seaside   31  # Assume country based on name for beach swims$english[swims$where == \"beach\"] <- \"US\" swims$english[swims$where == \"coast\"] <- \"US\" swims$english[swims$where == \"seashore\"] <- \"UK\" swims$english[swims$where == \"seaside\"] <- \"UK\"  # Assume Farenheit for US swims$temp[swims$english == \"US\"] <- (swims$temp[swims$english == \"US\"] - 32) * 5/9 swims #>   name    where     temp english #> 1 Adam    beach 35.00000      US #> 2 Bess    coast 32.77778      US #> 3 Cora seashore 28.00000      UK #> 4 Dale    beach 29.44444      US #> 5 Evan  seaside 31.00000      UK  # save result with a timestamp now <- Sys.time() timestamp <- format(now, \"%Y-%B-%d_%H-%M-%S\") (outfile <- paste0(timestamp, \"_\", sub(\"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\", infile))) #> [1] \"2025-April-23_16-01-26_swim_clean.csv\" write.csv(swims, file = outfile, quote = FALSE, row.names = FALSE) library(tidyverse)  localize_beach <- function(dat) {   lookup_table <- tribble(     ~where, ~english,     \"beach\",     \"US\",     \"coast\",     \"US\",     \"seashore\",     \"UK\",     \"seaside\",     \"UK\"   )   left_join(dat, lookup_table, by = \"where\") }  swims_in %>% localize_beach() #>   name    where temp english #> 1 Adam    beach   95      US #> 2 Bess    coast   91      US #> 3 Cora seashore   28      UK #> 4 Dale    beach   85      US #> 5 Evan  seaside   31      UK f_to_c <- function(x) (x - 32) * 5/9  celsify_temp <- function(dat) {   mutate(dat, temp = if_else(english == \"US\", f_to_c(temp), temp)) }  swims_in %>% localize_beach() %>% celsify_temp() #>   name    where     temp english #> 1 Adam    beach 35.00000      US #> 2 Bess    coast 32.77778      US #> 3 Cora seashore 28.00000      UK #> 4 Dale    beach 29.44444      US #> 5 Evan  seaside 31.00000      UK outfile_path <- function(infile) {   now <- Sys.time()   timestamp <- format(now, \"%Y-%B-%d_%H-%M-%S\")   paste0(timestamp, \"_\", str_replace(infile, \"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\")) }  outfile_path(infile) #> [1] \"2025-April-23_16-01-26_swim_clean.csv\" # define functions localize_beach <- function(dat) {   lookup_table <- tribble(     ~where, ~english,     \"beach\",     \"US\",     \"coast\",     \"US\",     \"seashore\",     \"UK\",     \"seaside\",     \"UK\"   )   left_join(dat, lookup_table, by = \"where\") }  f_to_c <- function(x) (x - 32) * 5/9  celsify_temp <- function(dat) {   mutate(dat, temp = if_else(english == \"US\", f_to_c(temp), temp)) }  outfile_path <- function(infile) {   now <- Sys.time()   timestamp <- format(now, \"%Y-%B-%d_%H-%M-%S\")   paste0(timestamp, \"_\", str_replace(infile, \"(.*)([.]csv$)\", \"\\\\1_clean\\\\2\")) } library(tidyverse)  source(\"cleaning-funs.R\")  infile <- \"swim.csv\" swims <- read.csv(infile)  swims <- swims %>%    localize_beach() %>%    celsify_temp() swims #>   name    where     temp english #> 1 Adam    beach 35.00000      US #> 2 Bess    coast 32.77778      US #> 3 Cora seashore 28.00000      UK #> 4 Dale    beach 29.44444      US #> 5 Evan  seaside 31.00000      UK  write.csv(swims, outfile_path(infile))"},{"path":"https://landscitech.github.io/rResources/articles/functions.html","id":"benefits-of-a-functional-mindset","dir":"Articles","previous_headings":"","what":"Benefits of a functional mindset","title":"Why use functions","text":"start using functions code start notice opportunities reduce repetition write efficient code.","code":""},{"path":"https://landscitech.github.io/rResources/articles/functions.html","id":"example-3","dir":"Articles","previous_headings":"Benefits of a functional mindset","what":"Example 3","title":"Why use functions","text":"Let say want determine variable mtcars data set best predictor mpg. build linear model variable vs mpg (Note toy example stats advice). first attempt might right hand. One option use loop Another option write function iteratively apply variables like better loop less boilerplate code. becomes really useful need apply model different set variables. loop need repeat whole thing since function saved object can easily apply different vector. can easily apply additional functions results get desired output.","code":"library(broom) mod_cyl <- lm(mpg ~ cyl, data = mtcars) gl_cyl <- glance(mod_cyl)  mod_disp <- lm(mpg ~ disp, data = mtcars) gl_disp <- glance(mod_disp)  data.frame(var = c(\"cyl\", \"disp\"), r.squared = c(gl_cyl$r.squared, gl_disp$r.squared)) #>    var r.squared #> 1  cyl 0.7261800 #> 2 disp 0.7183433  # But for all the variables... sigh mtcars_vars <- colnames(mtcars) %>% str_subset(\"mpg\", negate = TRUE)  mtcars_mods <- vector(\"list\", length = length(mtcars_vars)) for (i in seq_along(mtcars_vars)) {   form <- as.formula(paste0(\"mpg ~ \", mtcars_vars[i]))   mod <- lm(form, data = mtcars)   mtcars_mods[[i]] <- mod } fit_mpg_vs_x <- function(x){   form <- as.formula(paste0(\"mpg ~ \", x))   lm(form, data = mtcars) }  # name the mtcars_vars list so output is named names(mtcars_vars) <- mtcars_vars  mtcars_mods <- map(mtcars_vars, fit_mpg_vs_x) library(broom) mtcars_mods %>% map(glance) %>% list_rbind(names_to = \"var\") %>%    ggplot(aes(fct_reorder(var, r.squared), r.squared))+   geom_point()+   labs(y = \"R squared\", x = \"Variable\")"},{"path":"https://landscitech.github.io/rResources/articles/functions.html","id":"best-practices-for-writing-functions","dir":"Articles","previous_headings":"","what":"Best practices for writing functions","title":"Why use functions","text":"go , lets take moment introduce two coding practices critical packages, greatly assist get practice now.","code":""},{"path":"https://landscitech.github.io/rResources/articles/functions.html","id":"documentation","dir":"Articles","previous_headings":"Best practices for writing functions","what":"Documentation","title":"Why use functions","text":"package, function documentation see run ?str. names function, describes use, outlines argument definitions critically code examples. Outside package, different using “#” add code comments. However “roxygen2” package creates formality aid now package automatically generate help file. Rstudio, cursor inside function, can enter “ctrl-alt-shift-r” find “Insert Roxygen skeleton” “Code” menu bar. insert following pieces function. can go add details function: R ignore comments general use, Rstudio highlight arguments makes easy read within code. “@examples” tag allows show code supposed run. often part look help page, worth putting time function complicated.","code":"#' Title #' #' @param x  #' #' @returns #' @export #' #' @examples rescale01 <- function(x) {   (x - min(x)) / (max(x) - min(x)) } #' Rescales a value between 0 and 1  #'  #' Allows you to take a vector of values or column #' #' @param x vector of values to rescale #' #' @returns vector of values rescaled #' #' @examples  #'        rescale01(mtcars$mpg) #'         #'        transmute(mtcars, #'              mpg,  #'              mpg_scaled = rescale01(mpg)) #'         rescale01 <- function(x) {   (x - min(x)) / (max(x) - min(x)) }"},{"path":"https://landscitech.github.io/rResources/articles/functions.html","id":"testing","dir":"Articles","previous_headings":"Best practices for writing functions","what":"Testing","title":"Why use functions","text":"know function working planned? cases ’ll get error, always. Lets go back original version without na.rm variable (just ). version function run following, can pretty sure won’t miss outputs, expect ? formalize understanding function , write tests. package “testthat” can greatly help . case, knew values equal denominator function zero. R dividing zero returns NaN. However perhaps forgot min max “na.rm=FALSE” default, expect NA second example returned NA: case expecting one NA, min max return NA, values vector returned NA. saw updated function (shown ), can update function include na.rm variable default TRUE. modification allowsd us quickly easily change code allowing chose na.rm behaviour setting default TRUE usually make sense. Now change expectations initial test add new test show learned behaviour na.rm=FALSE. formal structure packages running storing tests, generic code, may want separate file package named ‘tests-rescale01.R’ tests-functions.R' document tests. Also note, code within \"testthat\" functions exported main environment. See thetesting-cleaning-funs.R` repo example.","code":"a <- c(1, 1, 1, 1, 1) rescale01(a) #> [1] NaN NaN NaN NaN NaN a_r <- c(NA,runif(10, -1, 1)) rescale01(a_r) #>  [1] NA NA NA NA NA NA NA NA NA NA NA testthat::test_that(\"All equal returns NaN\",                     {                       testthat::expect_equal(                         {                           a <- c(1, 1, 1, 1, 1)                           unique(rescale01(a))                                                    },                          NaN # Here is what we expect the above to return                       )                     }) testthat::test_that(\"One NA doesn't spoil the batch\",                     {                       testthat::expect_equal(                         {                           a_r <- c(NA,runif(10, -1, 1))                           a_r2 <- rescale01(a_r)                           sum(is.na(a_r2)) # Count the number of NA in the output                         },                         1 # We expect just one NA in the output                       )                     }                     ) #' Rescales a value between 0 and 1  #'  #' Allows you to take a vector of values or column #' #' @param x vector of values to rescale #' @param na.rm logical should NA values be removed from min/max. Defaults to TRUE #' #' @returns vector of values rescaled #' #' @examples  #'        rescale01(mtcars$mpg) #'         #'        transmute(mtcars, #'              mpg,  #'              mpg_scaled = rescale01(mpg)) #'         rescale01 <- function(x, na.rm=TRUE) {   (x - min(x, na.rm = na.rm)) / (max(x, na.rm = na.rm) - min(x, na.rm = na.rm)) } testthat::test_that(\"One NA doesn't spoil the batch, unless I want it to\",                     {                       a_r <- c(NA,runif(10, -1, 1))                                              # Test default behaviour                       testthat::expect_equal(                         {                          a_r2 <- rescale01(a_r)                           sum(is.na(a_r2)) # Count the number of NA in the output                         },                         1                       )                                              # Now we expect all NA if we set na.rm=FALSE                       testthat::expect_equal(                         {                                                     a_r2 <- rescale01(a_r, na.rm = FALSE)                           sum(is.na(a_r2)) # Count NAs                         },                         11                       )                     }                     )"},{"path":"https://landscitech.github.io/rResources/articles/functions.html","id":"when-to-make-it-a-package","dir":"Articles","previous_headings":"","what":"When to make it a Package?","title":"Why use functions","text":"R package collection functions metadata can easily shared R users. includes standardized folder structure set files. copy twice rule thumb applies whole functions well. copied function across two separate script least go separate file sourced scripts need change one place. copying helper functions multiple projects become package can call script library(mypackage). Another school thought analysis projects use package structure organize code (One example) modified package structure additional folders added analysis paper writing (Sarah uses).","code":""},{"path":"https://landscitech.github.io/rResources/articles/functions.html","id":"how-to-create-a-package","dir":"Articles","previous_headings":"","what":"How to create a package","title":"Why use functions","text":"book R Packages contains everything need know write package. key files define package : DESCRIPTION: Metadata package including dependencies NAMESPACE: List imported exported functions R: Code defines functions package Two packages, devtools usethis, tools RStudio make building package pretty easy. example, boilerplate structure package can created usethis::create_package(). add new function scripts usethis::use_r(), create tests usethis::use_test.","code":""},{"path":"https://landscitech.github.io/rResources/articles/functions.html","id":"benefits-of-using-a-package","dir":"Articles","previous_headings":"","what":"Benefits of using a package","title":"Why use functions","text":"Easy loading re-loading: call devtools::load_all() (Ctrl-Shift-L) source functions R directory Way record install dependencies: record dependencies usethis::use_package(), use devtools::install_deps() install listed dependencies. (Note assumes code works recent version dependencies!) Documentation: Functions package documented using Roxygen, special comments create documentation functions. RStudio use Code > Insert Roxygen Skeleton Alt-Ctrl-Shift-R insert template cursor function definition. pkgdown website: Run usethis::use_pkgdown_github_pages() create website package README home page, vignettes rendered articles reference function documentation.(example package roads) Testing: Unit tests ensure functions continue expect make changes update dependencies. usethis::use_testthat() sets testing architecture usethis::use_test opens new test file. usethis::use_github_action() sets GitHub actions run R CMD check includes tests GitHub every time commit main branch aka Continuous Integration testing.","code":""},{"path":"https://landscitech.github.io/rResources/articles/functions.html","id":"cran-or-not","dir":"Articles","previous_headings":"","what":"CRAN or not","title":"Why use functions","text":"get point creating package want share, one question might “?”. people use R use install.packages. planning sharing packages folks limited technical experience limited permissions computer, install.packages lowest barrier entry users. however unfortunately highest barrier package developer. Basic usage function requires package CRAN. good chapter submitting CRAN : https://r-pkgs.org/release.html. step difficulty user use r-universe website host binary files. R-universe generally require extra packages software (like Rtools “devtools” package). requires bit work setup, good walkthroughs . build package locally, can installed : However, requires separate files operating system, often throw errors based users computer eccentricities requires sharing file time update. Perhaps easiest use GitHub. allow users install using simple packages like “remotes” “pak”. downside require installation “source”, requires “Rtools” Windows may require software installations OS. considering CRAN, start planning early: Limit dependencies Create tests build Document everything public facing (well). Run tests locally server Expect back forth submit Use usethis::use_release_issue() get checklist things submitting help avoid issues","code":"install.packages(\"naturecounts\",                   repos = c(birdscanada = 'https://birdscanada.r-universe.dev',                            CRAN = 'https://cloud.r-project.org')) install.packages(\"file://path/to/file.zip\", repos = NULL) remotes::install_github(\"BirdsCanada/naturecounts\")  pak::pak(\"BirdsCanada/naturecounts\")"},{"path":"https://landscitech.github.io/rResources/articles/good_code.html","id":"reproducibility","dir":"Articles","previous_headings":"","what":"Reproducibility","title":"Minimum requirements for good code","text":"TLDR: Use rcompendium renv packages. code reproducible someone else’s computer minimal effort. typically two challenges : managing data managing package versions.","code":""},{"path":"https://landscitech.github.io/rResources/articles/good_code.html","id":"project-structure","dir":"Articles","previous_headings":"Reproducibility","what":"Project structure","title":"Minimum requirements for good code","text":"Use package rcompendium create new “compendium” R code, data potentially paper. create standard folder structure makes easy remember paths across projects set useful strategies ensuring reproducibility. package automates boilerplate needed follow good practices reproducible research. Follow Getting Started Working Compendium articles package website get set . initial set easy start new project rcompendium::new_compendium. starting new project include research paper can create new repository using LandSciTech paper-repo-template template repository. click green button top right corner create new repository structure template includes recommended folder structure rcompendium template .Rmd file drafting paper files needed render Word references labelled figures.","code":""},{"path":"https://landscitech.github.io/rResources/articles/good_code.html","id":"managing-data","dir":"Articles","previous_headings":"Reproducibility","what":"Managing data","title":"Minimum requirements for good code","text":"Large data sets typically stored GitHub need shared another way Google drive OSF similar. Ideally downloaded analysis code using eg googledrive osfr. Either way project standard folder structure (eg default rcompendium) relative paths code continue work.","code":""},{"path":"https://landscitech.github.io/rResources/articles/good_code.html","id":"managing-package-versions","dir":"Articles","previous_headings":"Reproducibility","what":"Managing package versions","title":"Minimum requirements for good code","text":"analysis project eventually shared static way use renv track packages used versions (also included rcompendium). creating tool follow R package structure packages recorded DESCRIPTION (see usethis::use_package)","code":""},{"path":"https://landscitech.github.io/rResources/articles/good_code.html","id":"coding-practices","dir":"Articles","previous_headings":"Reproducibility","what":"Coding practices","title":"Minimum requirements for good code","text":"Never use setwd(). Set project files need folder within project. need get data outside project set path top script better yet put online download programmatically. Put sourced files, hardcoded variables paths might need changed top script. Don’t save workspace. Rstudio Tools > Global Options > General uncheck restore workspace set save workspace never. Don’t use save() either. object took awhile create need another script use saveRDS() save individual objects. final result save normal file (tif, csv, shp, …) since easier reuse. Re-run code top frequently. part code takes long practical consider using targets reproducible, complex save results least re-run everything else. Avoid repetition. Use functions loops iteration functions (eg apply, purrr::map) Comment code. Try focus instead code . use clear names functional programming apparent. can make sections large document structure : Consider using Quarto Rmarkdown can write code, text, figures tables together one file can render html, pdf word doc.","code":"# at the top of the script datPth <- “path/to/data/folder” #... #... # Wherever it is used myData <- read.csv(file.path(datPth, “myData.csv”)) # Load data #--------------------------  # Prepare data #-----------------------  # Run model #--------------------------"},{"path":"https://landscitech.github.io/rResources/articles/good_code.html","id":"style","dir":"Articles","previous_headings":"","what":"Style","title":"Minimum requirements for good code","text":"Aspirational standard: https://style.tidyverse.org/. necessary follow every detail exactly. Key points: Pick naming convention stick . tidyverse uses snake_case sometimes uses camelCase pick one stick project. Use meaningful names consistent. Eg. dat1, dat2 bee_obs_raw bee_obs_use. Tools>Global Options>Code>Display can add margin line 80 char Use ctrl-shift-/ reflow comments max 80 char Place spaces around infix operators (=, +, -, <-, etc.). rule applies using = function calls. Always put space comma, never (just like regular English). Rstudio mostly indent . Use ctrl-fix indenting line selection Use <- assignment =. Use shortcut alt– insert <- spaces. can use ctrl-shift-style code don’t like way breaks lines use styler RStudio Addin style selection add line breaks manually.","code":"# Good average <- mean(feet / 12 + inches, na.rm = TRUE)  # Bad average=mean(feet/12+inches,na.rm=T)"},{"path":"https://landscitech.github.io/rResources/articles/package_development.html","id":"change-a-package-name","dir":"Articles","previous_headings":"","what":"Change a package name","title":"R package development","text":"https://www.njtierney.com/post/2017/10/27/change-pkg-name/","code":""},{"path":"https://landscitech.github.io/rResources/articles/package_development.html","id":"set-up-github-actions","dir":"Articles","previous_headings":"","what":"Set up GitHub Actions","title":"R package development","text":"Setup run R CMD CHECK GitHub 3 OSes use_github_action_check_release() details available . make new GitHub Personal Access Token one workflow scope. also changed event triggers check : workflow_dispatch means run manually development master branch private repo uses resources quickly. option use branches development trigger action pull requests.","code":""},{"path":"https://landscitech.github.io/rResources/articles/package_development.html","id":"setting-up-package-website-with-pkgdown","dir":"Articles","previous_headings":"","what":"Setting up package website with pkgdown","title":"R package development","text":"Use usethis::use_pkgdown_github_pages() add GitHub action build website based documentation vignettes whenever push master branch keep date. uses branch called gh-pages just don’t mess branch.","code":""},{"path":"https://landscitech.github.io/rResources/articles/package_development.html","id":"cran-r-cmd-check-notes-that-have-caused-issues","dir":"Articles","previous_headings":"","what":"CRAN R CMD CHECK NOTES that have caused issues","title":"R package development","text":"get NOTE says “visible binding global variable” use dplyr column names really objects. Need add .data$ , see also happened data wanted available inside functions also user. can make available users use_data(dataset) need refer package package::dataset. now issue building pkgdown website failed saying “dataset exported namespace package” sure best answer . moment including data external internal seems work.","code":""},{"path":"https://landscitech.github.io/rResources/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sarah Endicott. Author, maintainer.","code":""},{"path":"https://landscitech.github.io/rResources/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Endicott S (2025). rResources: Resources Reproducible Research. R package version 0.0.0.9000, https://landscitech.github.io/rResources/.","code":"@Manual{,   title = {rResources: Resources for Reproducible Research},   author = {Sarah Endicott},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://landscitech.github.io/rResources/}, }"},{"path":"https://landscitech.github.io/rResources/index.html","id":"rresources","dir":"","previous_headings":"","what":"Resources for Reproducible Research","title":"Resources for Reproducible Research","text":"Welcome rResources page! place share resources best practices related R reproducible research. following pages assembled Sarah Endicott record best practices recommendations reproducible research R. welcome ideas contributions!","code":""},{"path":"https://landscitech.github.io/rResources/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Resources for Reproducible Research","text":"Minimum requirements “good” code Recommendations writing reproducible code links tools detailed resources R Package Development Links R package development book notes additional steps releasing package CRAN GitHub Git GitHub Reproducible Research tutorial walking installation use Git GitHub. Setting cloud processing Azure Batch tutorial walking setup Azure Batch cloud processing LERS access .","code":""},{"path":"https://landscitech.github.io/rResources/index.html","id":"resources-developed-by-others","dir":"","previous_headings":"","what":"Resources developed by others","title":"Resources for Reproducible Research","text":"R Data Science intro R uses tidyverse. Geocomputation R Book spatial stuff within R Mastering Shiny Learn build interactive Shiny apps. Advanced R Learn advanced concepts including functional object oriented programming. R packages Learn build R packages Coding Resources Ecologists list resources R collected Craig Simpkins","code":""}]
